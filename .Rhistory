list.files()
?list.files
args()
args(list.files())
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path('folder1','folder2')
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0.10,by=0.5)
seq(0,10,by=0.5)
my_seq<-seq(5,10, length=30)
length()
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <-c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste (my_char, collapse = " ")
c(my_char, "bear")
my_name <-c(my_char, "bear")
my_name
paste (my_name, "s", collapse = " ")
paste (my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y", "Z"), sep = "")
paste(LETTERS,1:4, sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c(x[3],x[5],x[7])
[c(3,5,7)]
[[c(3,5,7)]]
c[3,5,7]
info()
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <-c(foo = 11, bar=2, norf= NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix <-matrix(data=1:20, nrow=4, ncol=5)
my_matrix <-matrix(1:20, nrow=4, ncol=5)
my_matrix2 <-matrix(1:20, nrow=4, ncol=5)
my_matrix2 <-matrix(data=1:20, nrow=4, ncol=5)
as.matrix(1:20)
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix, my_matrix2)
patients<-c("Bill","Gina","Kelly", "Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
x<-c(4,"a",TRUE)
class(x)
x<-c(1,3,5)
y<-c(3,2,10)
cbind(x,y)
x<-list(2,"a","b",TRUE)
X[[1]]
x[[1]]
x<-1:4 
y<-2:3
x+y
x<=c(3,5,1,10,12,6)
x<-c(3,5,1,10,12,6)
x[x<6]<-0
x
x[x==0]<6
x[x==6]<-0
x
x[x==0]<6
x
x[x<6]==0
x
x[x%in%1:5]<-0
x
x[x!=6]<-0
x
x[x<=5]<-0
x
x[x>6]<-0
x
x[x==0]<-6
x
x[x>0]<-6
x
x[x>=6]<-0
x
pwd()
info()
getwd()
con<-file("hw1_data","r")
con<-file("hw1_data.csv","r")
con<-file("hw1_data.csv","r")
data<-read.csv(con)
close(con)
con<-file("hw1_data.csv","r")
data<-read.csv(con)
x<-readLines(con,10
x<-readLines(con,1)
x<-readLines(con,1)
x
con<-file("hw1_data.csv","r")
close(con)
con<-file("hw1_data.csv","r")
x<-writeLines(con,1)
x<-writeLines(con,1)
data<-read.csv("hw1_data.txt")
data<-read.csv("hw1_data.csv")
data
data<-read.csv("hw1_data.csv",1)
data
x<-readLines(con,2)
x
x<-readLines(con,3)
x
nrow(data)
x<-readLines(con,152)
x
 bad <- is.na(x)
bad
?data.frames
??data.frames
initial<-read.table("hw1_data.csv",nrows=2)
save.image("C:\\Users\\asus\\Documents\\GitHub\\rpractice2")
q()
if(x>3){
y<- 10
}else{
y<- 10
}
u<-if(x>3){
10}else{
0
}
for(i in 1:10){
print(i)
}
x<-c("a","b","c","d")
x
for(i in 1:4){
print[x[i]]}
for(i in 1:4){
q()
q()
q()
q()
q()
q()
q()
print[x(i)]
}
swirl()
library.load('swirl')
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6!= 8 && 4 > 3.9
isTRUE(6 > 4)
identical ('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10
)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints >0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div =2)
args(remainder)
submit()
evaluate(stddev, c(1.4,3.6,7.9, 8.8))
evaluate(mean, c(1.4,3.6,7.9, 8.8))
evaluate(sd, c(1.4,3.6,7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x+1},c(8,4,0)x[1)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
submit()
telegram("soadikka")
submit()
submit()
submit()
mad_libs(woods, dark, bear)
mad_libs("woods","dark","bear")
submit()
"I" %p% "love"%p% "R"
"I" %p% "love"%p% "R!"
exit()
q()
list.files("diet_data")
dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url,"diet_data.zip")
unzip("diet_data.zip",exdir="diet_data")
list.files("diet_data")
andy <-read.csv("diet_data/Andy.csv")
head(andy)
files<-list.files("diet_data")
files
files[1]
files[2]
files[3:5]
files_full<-list.files("diet_data",full.names=TRUE)
files_full
head(read.csv(files_full[3])
)
andy_david<-rbind(andy, read.csv(files_full[2]))
head(andy_david)
tail(andy_david)
day_25<- andy_david[which(andy_david$Day == 25),]
day_25
for(i in 1:5) {print(i)}
dat <- data.frame()
for(i in 1:5){
dat<-rbind(dat,read.csv(files_full[i]))
}
str(dat)
for(i in 1:5){
dat2<-data.frame()
dat2<-rbind(dat2,read.csv(files_full[i]))
}
str(dat2)
str(dat2)
head(dat2)
median(dat$Weight)
dat
median(dat$Weight, na.rm=TRUE)
dat_30 <- dat[which(dat[,"Day"] == 30),]
dat_30
median(dat_30$Weight)
weightmedian <- function(directory,day){
files_list<-list.files(directory, full.names = TRUE)
dat<- data.frame()
for(i in 1:5){
dat<-rbind(dat,read.csv(files_list[i]))
}
dat_subset<-dat[which(dat[,"Day"] == day),]
meadian(dat_subset[,"Weight"], na.rm = TRUE)
}
weightmedian<-function(directory, day){
files_list<- list.files(directory, full.names = TRUE)
dat<-data.frame()
for(i in 1:5){
dat<-rbind(dat[,"Day"] == day),]
dat<-rbind(dat, read.csv(files_list[i]))
weightmedian<-function(directory, day){
files_list<-list.files(directory,full.names = TRUE)
dat<- data.frame()
for(i in 1:5){
dat<-rbind(dat,read.csv(files_list[i]))
}
dat_subset<-dat[which(dat[,"Day"] == day),]
median(dat_subset[,"Weight"],na.rem = TRUE)
}
weightmedian(directory = "diet_data", day = 20)
 weightmedian<-function(directory, day){
+ files_list<-list.files(directory,full.names = TRUE)
+ dat<- data.frame()
+ for(i in 1:5){
+ dat<-rbind(dat,read.csv(files_list[i]))
+ }
+ dat_subset<-dat[which(dat[,"Day"] == day),]
+ median(dat_subset[,"Weight"],na.rm = TRUE)
}
 weightmedian<-function(directory, day){
+ files_list<-list.files(directory,full.names = TRUE)
+ dat<- data.frame()
+ for(i in 1:5){
+ dat<-rbind(dat,read.csv(files_list[i]))
+ }
+ dat_subset<-dat[which(dat[,"Day"] == day),]
+ median(dat_subset[,"Weight"],na.rm = TRUE)
weightmedian(directory = "diet_data", day = 20)
 weightmedian<-function(directory, day){
files_list<-list.files(directory,full.names = TRUE)
dat<- data.frame()
for(i in 1:5){
dat<-rbind(dat,read.csv(files_list[i]))
}
dat_subset<-dat[which(dat[,"Day"] == day),]
median(dat_subset[,"Weight"],na.rm = TRUE)
}
weightmedian("diet_data",4)
weightmedian(directory = "diet_data", day = 20)
weightmedian("diet_data",17)
submit()
summary(files_full)
tmp<-vector(mode = "list", length = length(files_full))
summary(tmp)
for(i in seq_along(files_full)){
tmp[[i]] <- read.csv(files_full[[i]])
}
str(tmp)
str(lapply(files_full, read.csv))
str(tmp[[1]])
head(tmp[[1]][,"Day"])
output<-rbind(tmp[[1]], tmp[[2]], tmp[[3]], tmp[[4]], tmp[[5]])
str(output)
output <-do.call(rbind,tmp)
str(output)
?mean
print(R.version.string)
weightmean <- function(directory, pollutant, id = 1:332){
files_list<-list.files(directory, full.names = TRUE)
for(i in id)
{
dat<-rbind(dat, read.csv(files_list[i]))
}
dat_subset<-dat[,"sulfate"]
mean(dat_subset[,"sulfate"],na.rm = TRUE)
}
weightmean(directory = "specdata", "sulfate", 1:10)
list.files(specdata)
list.file("specdata")
list.files("specdata")
getwd()
setwd("specdata")
setwd("Users/asus/Documents/GitHub")
save.image("C:\\Users\\asus\\Documents\\GitHub\\practice for assignment")
q()
library(swirl)
ls()
rm(list-ls())
rm(list=ls())
ls()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flags_colors<-[,11:170
flags_colors<-[,11:17]
flags_colors<-flags[,11:170
]
flag_colors <- flags[,11:17]
head()
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
save.image("C:\\Users\\asus\\Documents\\R\\r assignments lapply")
q()
source("cacheMean.R")
getwd()
wd<-"C:/Users/asus/Documents/GitHub"
setwd(wd)
source("cacheMean.R")
makeVector(4)
cachemean()
cachemean(4)
cachemean(makevector(4))
cachemean(makeVector(4))
cachemean(makeVector(3))
source("cacheMatrix.R")
source("cachematrix.R")
wd<-"C:/Users/asus/Documents/GitHub/ProgrammingAssignment2"
setwd(wd)
getwd()
source("cachematrix.R")
makeCacheMatrix(2)
cacheSolve(makeCacheMatrix(4))
makeCacheMatrix(6)
cacheSolve(makeCacheMatrix(6))
?MATRIX
?matrix
makeCacheMatrix(c(2, 4, 3, 1, 5, 7),nrow=2,ncol=3,byrow = TRUE)
makeCacheMatrix(c(2, 4, 3, 1, 5, 7))
getwd()
cacheSolve(makeCacheMatrix(c(2, 4, 3, 1, 5, 7)))
cacheSolve(makeCacheMatrix(c(2, 4, 3,2, 1, 5, 7,8)))
save.image("C:\\Users\\asus\\Documents\\GitHub\\ProgrammingAssignment2\\programming assignment")
q()
